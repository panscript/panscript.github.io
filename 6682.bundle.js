"use strict";(self.webpackChunkpanscript=self.webpackChunkpanscript||[]).push([[6682],{6682:(t,e,r)=>{r.r(e),r.d(e,{default:()=>n});const n='// Expressions combine variables using standard operators\r\n\r\n// They can use numeric operators:\r\nwrite(2 + 2)\t\t// addition\r\nwrite(3 - 1)\t\t// subtraction\r\nwrite(3 * 2)\t\t// multiplication\r\nwrite(10 / 3)\t\t// division\r\nwrite(10 % 3)\t\t// remainder of division\r\nwrite(2 ^ 3)\t\t// exponentiation\r\nnew_line()\r\n\r\n// Logical operators:\r\nwrite(not true)\r\nwrite(!true)\t\t\t// ! is the same as "not"\r\nwrite(true and false)\r\nwrite(true && false)\t// && is the same as "and"\r\nwrite(true or false)\r\nwrite(true || false)\t// || is the same as "or"\r\nnew_line()\r\n\r\n// And relational operators:\r\nwrite(2 > 1)\t\t\t\t// greater than\r\nwrite(2 >= 2)\t\t\t\t// greater than or equal to\r\nwrite(2 < 1)\t\t\t\t// less than\r\nwrite(2 <= 2)\t\t\t\t// less than or equal to\r\nwrite(1 == 1)\t\t\t\t// equal to\r\nwrite(true == true)         // equal to\r\nwrite("Hello" == "Hello")\t// equal to\r\nwrite(1 != 0)\t\t\t\t// different than\r\nwrite(true != false)\t\t// different than\r\nwrite("Hello" != "hello")\t// different than\r\nnew_line()\r\n\r\n// Operator precedence may be modified using parentheses:\r\nwrite(1 + 2 * 3 == 7)\r\nwrite((1 + 2) * 3 == 9)\r\nwrite(true or false and false)\r\nwrite((true or false) and false)\r\nnew_line()'}}]);