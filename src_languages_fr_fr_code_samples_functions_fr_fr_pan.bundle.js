"use strict";
(self["webpackChunkpanscript"] = self["webpackChunkpanscript"] || []).push([["src_languages_fr_fr_code_samples_functions_fr_fr_pan"],{

/***/ "./src/languages/fr_fr/code_samples/functions.fr_fr.pan":
/*!**************************************************************!*\
  !*** ./src/languages/fr_fr/code_samples/functions.fr_fr.pan ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/*\r\n\r\nLes fonctions d'utilisateur sont des fonctions créés par vous,\r\nl'utilisateur. Vous pouvez créer des fonctions pour réutiliser des\r\nextraits de code encore et encore, ou pour organiser votre code en\r\nmorceaux plus petits qui sont plus faciles à tester.\r\n\r\nLes fonctions sont déclarées comme suit :\r\nfonction nom(type_du_paramètre nom_du_paramètre, ...) renvoie type\r\n\t// code qui s'exécute lorsque la fonction est appelée\r\nfin\r\n\r\nOu, pour les fonctions non typées, comme suit :\r\nfonction nom(type_du_paramètre nom_du_paramètre, ...)\r\n\t// code qui s'exécute lorsque la fonction est appelée\r\nfin\r\n\r\nVous pouvez finir l'éxécution de la fonction à tout moment avec la\r\ncommande retourne. Cette commande \"retourne\" est utilisée pour\r\nrenvoyer un résultat à l'appelant de la fonction.\r\n\r\n*/\r\n\r\n// Les fonctions typées renvoient une valeur du type spécifié\r\nfonction réponse() renvoie nombre\r\n\t// Retourne le nombre 42\r\n\tretourne 42\r\nfin\r\n\r\necrire(\">>> réponse()\")\r\necrire(réponse())\r\nnouvelle_ligne()\r\n\r\n// Les fonctions peuvent avoir zéro ou plusieurs paramètres typés\r\nfonction incrément(nombre x) renvoie nombre\r\n\t// Renvoie la valeur de x incrémentée de 1\r\n\tretourne x + 1\r\nfin\r\n\r\necrire(\">>> incrément(x)\")\r\necrire(incrément(1))\t\t\t// Noter la composition des fonctions\r\necrire(incrément(incrément(1)))\t// Noter la composition des fonctions\r\nnouvelle_ligne()\r\n\r\nfonction salutation(texte nom_de_la_personne) renvoie texte\r\n\tretourne \"Salut, {nom_de_la_personne} !\"\r\nfin\r\n\r\necrire(\">>> salutation(nom)\")\r\necrire(salutation(\"Jean\"))\r\nnouvelle_ligne()\r\n\r\n\r\nfonction cest_palindrome(texte mot, logique insensible_à_la_casse) renvoie logique\r\n\tsi insensible_à_la_casse\r\n\t\tmot = minuscule(mot)\r\n\tfin\r\n\r\n\t// Implémentation naïve (naïve)\r\n\tretourne mot == inverser_le_texte(mot)\r\nfin\r\n\r\necrire(\">>> cest_palindrome(mot, insensible_à_la_casse)\")\r\necrire(cest_palindrome(\"Radar\", faux))\r\necrire(cest_palindrome(\"Radar\", vrai))\r\necrire(cest_palindrome(\"Salut\", vrai))\r\nnouvelle_ligne()\r\n\r\n\r\n// Les fonctions sans type ne renvoient pas de valeur\r\nfonction dessiner_triangle(nombre côté)\r\n\t// Si le côté est nul ou négatif, ne dessinez rien\r\n\tsi côté <= 0\r\n\t\tretourne  // quitter la fonction ici\r\n\tfin\r\n\r\n\tnombre i = 1\r\n\tpour toujours\r\n\t\tsi i > côté\r\n\t\t\tretourne  // une autre façon de quitter une boucle\r\n\t\tfin\r\n\r\n\t\tecrire(repeter(\"x\", i))\r\n\t\ti += 1\r\n\tfin\r\nfin\r\n\r\necrire(\">>> dessiner_triangle(côté)\")\r\ndessiner_triangle(5)\r\nnouvelle_ligne()");

/***/ })

}]);