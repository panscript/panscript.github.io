"use strict";(self.webpackChunkpanscript=self.webpackChunkpanscript||[]).push([[9378],{9378:(t,e,r)=>{r.r(e),r.d(e,{default:()=>n});const n='// Text functions are functions that manipulate text variables and values.\r\n\r\n/*\r\n\tto_text(x)\r\n\tConvert any value \'x\' to the text type.\r\n*/\r\nwrite(">>> to_text(x)")\r\nwrite("Number: " + to_text(42))\r\nwrite("Logical: " + to_text(true))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tlength(text)\r\n\tReturn the length of the given text.\r\n*/\r\nwrite(">>> length(text)")\r\nwrite(length("Hello"))\r\nwrite(length(""))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tupper_case(text)\r\n\tReturn the text with all letters in uppercase.\r\n*/\r\nwrite(">>> upper_case(text)")\r\nwrite(upper_case("lower"))\r\nwrite(upper_case("UPPER"))\r\nwrite(upper_case("Sentence"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tlower_case(text)\r\n\tReturn the text with all letters in lowercase.\r\n*/\r\nwrite(">>> lower_case(text)")\r\nwrite(lower_case("lower"))\r\nwrite(lower_case("UPPER"))\r\nwrite(lower_case("Sentence"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tsentence_case(text)\r\n\tReturn the text with the first letter in uppercase and the rest in lowercase.\r\n*/\r\nwrite(">>> sentence_case(text)")\r\nwrite(sentence_case("lower"))\r\nwrite(sentence_case("UPPER"))\r\nwrite(sentence_case("Sentence"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tleft(text, count)\r\n\tReturn up to \'count\' of the leftmost characters of the text.\r\n*/\r\nwrite(">>> left(text, count)")\r\nwrite(left("Long text", 7))\r\nwrite(left("Text", 7))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tright(text, count)\r\n\tReturn up to \'count\' of the rightmost characters of the text.\r\n*/\r\nwrite(">>> right(text, count)")\r\nwrite(right("Long text", 7))\r\nwrite(right("Text", 7))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tmiddle(text, position, count)\r\n\tReturn up to \'count\' characters from a text starting in a given position.\r\n\tPosition is 0-indexed, so 0 is the start of the text.\r\n*/\r\nwrite(">>> middle(text, position, count)")\r\nwrite(middle("ABCDEFG", 0, 3))\r\nwrite(middle("ABCDEFG", 2, 3))\r\nwrite(middle("ABCDEFG", 2, 10))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tslice_text(text, start, end)\r\n\tReturn all characters from a text between positions \'start\' and \'end\'.\r\n\tPositions are 0-indexed, so 0 is the start of the text.\r\n*/\r\nwrite(">>> slice_text(text, start, end)")\r\nwrite(slice_text("ABCDEFG", 0, 3))\r\nwrite(slice_text("ABCDEFG", 2, 3))\r\nwrite(slice_text("ABCDEFG", 2, 10))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tin_text(text, search_text)\r\n\tReturns logical value indicating whether \'search_text\' occurs in the text.\r\n*/\r\nwrite(">>> in_text(text, search_text)")\r\nwrite(in_text("This is a text", "This"))\r\nwrite(in_text("This is a text", "this"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tposition(text, search_text)\r\n\tReturn the position of the first occurrence of \'search_text\' within the text.\r\n\tThe returned position is 0-indexed, so 0 is the start of the text.\r\n\tReturn -1 if \'search_text\' does not occur in the text.\r\n*/\r\nwrite(">>> position(text, search_text)")\r\nwrite(position("This is a text", "This"))\r\nwrite(position("This is a text", "this"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tpad_left(text, length, padding)\r\n\tPad the given text using \'padding\' until the desired \'length\'.\r\n\t\'padding\' is inserted at the left of the text.\r\n*/\r\nwrite(">>> pad_left(text, length, padding)")\r\nwrite(pad_left("12345", 8, "0"))\r\nwrite(pad_left("12345", 10, "ab"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\tpad_right(text, length, padding)\r\n\tPad the given text using \'padding\' until the desired \'length\'.\r\n\t\'padding\' is inserted at the right of the text.\r\n*/\r\nwrite(">>> pad_right(text, length, padding)")\r\nwrite(pad_right("12345", 8, "0"))\r\nwrite(pad_right("12345", 10, "ab"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\trepeat(text, count)\r\n\tRepeat the given text for \'count\' times.\r\n*/\r\nwrite(">>> repeat(text, count)")\r\nwrite(repeat("a", 5))\r\nwrite(repeat("abc", 2))\r\nnew_line()\r\n\r\n\r\n/*\r\n\treverse_text(text)\r\n\tReturn the text with all characters in reverse order.\r\n*/\r\nwrite(">>> reverse_text(text)")\r\nwrite(reverse_text("Hello"))\r\nnew_line()\r\n\r\n\r\n/*\r\n\ttrim(text)\r\n\tReturn the text without leading and trailing whitespace characters.\r\n*/\r\nwrite(">>> trim(text)")\r\nwrite("\'" + trim(" Hello ") + "\'")\r\nnew_line()\r\n\r\n\r\n/*\r\n\ttrim_left(text)\r\n\tReturn the text without leading whitespace characters.\r\n*/\r\nwrite(">>> trim_left(text)")\r\nwrite("\'" + trim_left(" Hello ") + "\'")\r\nnew_line()\r\n\r\n\r\n/*\r\n\ttrim_right(text)\r\n\tReturn the text without trailing whitespace characters.\r\n*/\r\nwrite(">>> trim_right(text)")\r\nwrite("\'" + trim_right(" Hello ") + "\'")\r\nnew_line()'}}]);